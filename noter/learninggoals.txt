Period-1 Vanilla JavaScript, es2015/15.., Node.js, Babel + Webpack and TypeScript

Note: This description is too big for a single exam-question. It will be divided up into several questions for the exam
Subjects marked IN RED are what I call “scratch the surface” subjects. For example: you need to know the purpose of Webpack and Babel 
and how to “use it”, but only in a way so you can demonstrate you know the “basics” to get started.
 
 ES-Lint, Webpack, Babel and Typescripts are topics you can take (great)  advantage of during the
 rest of the semester (and get thereby get more experience), but you are NOT required to do this.

Explain and Reflect:
Explain differences between Java and JavaScript. You should include both topics related to the fact 
that Java is a compiled language and JavaScript a scripted language, and general differences in
 language features.

 -- compiled_vs_scripting.txt --

Explain the two strategies for improving JavaScript: ES6 (es2015) + ES7, versus Typescript.
 What does it require to use these technologies: In our backend with Node and in (many different)Browsers

Explain generally about node.js, when it “makes sense” and npm, and how it “fits” into the node echo system.

Explain about the Event Loop in Node.js

Explain (some) of the purposes with the tools Babel and WebPack, using  examples from the exercises (scratch surface)

Explain the purpose of “use strict” and Linters, exemplified with ESLint (linters + eslint scratch surface)
-in javascript you can use a variable without declaring it but you migth get warning. When you use strict mode it will give 
an explicit error when trying to do exact-ly that.

- A linter or lint refers to tools that analyze source code to flag programming errors, bugs, stylistic errors, and suspicious constructs.
The term originates from a Unix utility that examined C language source code. ESLint is a linter for echmascript 
ESLINT.ORG description : A pluggable and configurable linter tool for identifying and reporting on patterns in JavaScript. 
Maintain your code quality with ease.-

Explain using sufficient code examples the following features in JavaScript. 
Variable/function-Hoisting 
-- hoisting1.txt --

this in JavaScript and how it differs from what we know from Java/.net.
Function Closures and the JavaScript Module Pattern
Immediately-Invoked Function Expressions (IIFE)
JavaScripts Prototype
User defined Callback Functions (writing your own functions that takes a callback)

Explain the methods map, filter and reduce
Provide examples of user defined reusable modules implemented in Node.js

ES6-7 and TypeScript
Provide examples and explain the es2015 features: let, arrow functions, this, rest parameters, 
de-structuring assignments, maps/sets etc.

-The rest parameter syntax allows us to represent an indefinite number of arguments as an array.-

-The destructuring assignment syntax is a JavaScript expression that makes it possible to
unpack values from arrays, or properties from objects, into distinct variables.-

Explain and demonstrate how es2015 supports modules (import and export) similar to what is offered by NodeJS.

Provide an example of ES6 inheritance and reflect over the differences between Inheritance in Java and in ES6.
Provide examples with es6, running in a browser, using Babel and Webpack
Provide an number of examples to demonstrate the benefits of using TypeScript, including, types, 
interfaces, classes and generics

Callbacks, Promises and async/await

Explain about promises in ES-6 including, the problems they solve, a quick explanation of the Promise API and:
Example(s) that demonstrate how to avoid the callback hell  (“Pyramid of Doom")
Example(s) that demonstrate how to execute asynchronous (promise-based) code in serial or parallel
Example(s) that demonstrate how to implement our own promise-solutions.
Example(s) that demonstrate error handling with promises

Explain about JavaScripts async/await, how it relates to promises and reasons to use it compared to the plain promise API.

Provide examples to demonstrate 
Why this often is the preferred way of handling promises
Error handling with async/await
Serial or parallel execution with async/await.


Se the exercises for Period-1 to get inspiration for relevant code examples
